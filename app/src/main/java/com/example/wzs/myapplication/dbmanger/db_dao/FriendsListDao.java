package com.example.wzs.myapplication.dbmanger.db_dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIENDS_LIST".
*/
public class FriendsListDao extends AbstractDao<FriendsList, Long> {

    public static final String TABLENAME = "FRIENDS_LIST";

    /**
     * Properties of entity FriendsList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _ID = new Property(0, Long.class, "_ID", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property UserCode = new Property(3, String.class, "userCode", false, "USER_CODE");
        public final static Property MobilePhone = new Property(4, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property HeadImgPath = new Property(5, String.class, "headImgPath", false, "HEAD_IMG_PATH");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "NICK_NAME");
        public final static Property Signature = new Property(7, String.class, "signature", false, "SIGNATURE");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Area = new Property(9, String.class, "area", false, "AREA");
    }


    public FriendsListDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIENDS_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _ID
                "\"ID\" TEXT," + // 1: id
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"USER_CODE\" TEXT," + // 3: userCode
                "\"MOBILE_PHONE\" TEXT," + // 4: mobilePhone
                "\"HEAD_IMG_PATH\" TEXT," + // 5: headImgPath
                "\"NICK_NAME\" TEXT," + // 6: nickName
                "\"SIGNATURE\" TEXT," + // 7: signature
                "\"SEX\" TEXT," + // 8: sex
                "\"AREA\" TEXT);"); // 9: area
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIENDS_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendsList entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(5, mobilePhone);
        }
 
        String headImgPath = entity.getHeadImgPath();
        if (headImgPath != null) {
            stmt.bindString(6, headImgPath);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(8, signature);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendsList entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(5, mobilePhone);
        }
 
        String headImgPath = entity.getHeadImgPath();
        if (headImgPath != null) {
            stmt.bindString(6, headImgPath);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(8, signature);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendsList readEntity(Cursor cursor, int offset) {
        FriendsList entity = new FriendsList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobilePhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImgPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // signature
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // area
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendsList entity, int offset) {
        entity.set_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobilePhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImgPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSignature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setArea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendsList entity, long rowId) {
        entity.set_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendsList entity) {
        if(entity != null) {
            return entity.get_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendsList entity) {
        return entity.get_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
