package com.example.wzs.myapplication.dbmanger.db_dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRAWING_DATA_BEAN".
*/
public class DrawingDataBeanDao extends AbstractDao<DrawingDataBean, Long> {

    public static final String TABLENAME = "DRAWING_DATA_BEAN";

    /**
     * Properties of entity DrawingDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ttime = new Property(1, long.class, "Ttime", false, "TTIME");
        public final static Property Action = new Property(2, int.class, "action", false, "ACTION");
        public final static Property X = new Property(3, float.class, "X", false, "X");
        public final static Property Y = new Property(4, float.class, "Y", false, "Y");
    }

    private Query<DrawingDataBean> friendMsg_DrawingDataQuery;

    public DrawingDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DrawingDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRAWING_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TTIME\" INTEGER NOT NULL ," + // 1: Ttime
                "\"ACTION\" INTEGER NOT NULL ," + // 2: action
                "\"X\" REAL NOT NULL ," + // 3: X
                "\"Y\" REAL NOT NULL );"); // 4: Y
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRAWING_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DrawingDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTtime());
        stmt.bindLong(3, entity.getAction());
        stmt.bindDouble(4, entity.getX());
        stmt.bindDouble(5, entity.getY());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DrawingDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTtime());
        stmt.bindLong(3, entity.getAction());
        stmt.bindDouble(4, entity.getX());
        stmt.bindDouble(5, entity.getY());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DrawingDataBean readEntity(Cursor cursor, int offset) {
        DrawingDataBean entity = new DrawingDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // Ttime
            cursor.getInt(offset + 2), // action
            cursor.getFloat(offset + 3), // X
            cursor.getFloat(offset + 4) // Y
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DrawingDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTtime(cursor.getLong(offset + 1));
        entity.setAction(cursor.getInt(offset + 2));
        entity.setX(cursor.getFloat(offset + 3));
        entity.setY(cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DrawingDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DrawingDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DrawingDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "drawingData" to-many relationship of FriendMsg. */
    public List<DrawingDataBean> _queryFriendMsg_DrawingData(long Ttime) {
        synchronized (this) {
            if (friendMsg_DrawingDataQuery == null) {
                QueryBuilder<DrawingDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Ttime.eq(null));
                friendMsg_DrawingDataQuery = queryBuilder.build();
            }
        }
        Query<DrawingDataBean> query = friendMsg_DrawingDataQuery.forCurrentThread();
        query.setParameter(0, Ttime);
        return query.list();
    }

}
