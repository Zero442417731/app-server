package com.example.wzs.myapplication.dbmanger.db_dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_MSG".
*/
public class FriendMsgDao extends AbstractDao<FriendMsg, Long> {

    public static final String TABLENAME = "FRIEND_MSG";

    /**
     * Properties of entity FriendMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FriendUserId = new Property(1, String.class, "friendUserId", false, "FRIEND_USER_ID");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property DrawingId = new Property(3, String.class, "drawingId", false, "DRAWING_ID");
        public final static Property Order = new Property(4, String.class, "order", false, "ORDER");
        public final static Property Command = new Property(5, String.class, "command", false, "COMMAND");
        public final static Property PaintSize = new Property(6, String.class, "paintSize", false, "PAINT_SIZE");
        public final static Property PaintColor = new Property(7, String.class, "paintColor", false, "PAINT_COLOR");
    }

    private DaoSession daoSession;


    public FriendMsgDao(DaoConfig config) {
        super(config);
    }
    
    public FriendMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FRIEND_USER_ID\" TEXT," + // 1: friendUserId
                "\"TOKEN\" TEXT," + // 2: token
                "\"DRAWING_ID\" TEXT," + // 3: drawingId
                "\"ORDER\" TEXT," + // 4: order
                "\"COMMAND\" TEXT," + // 5: command
                "\"PAINT_SIZE\" TEXT," + // 6: paintSize
                "\"PAINT_COLOR\" TEXT);"); // 7: paintColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String friendUserId = entity.getFriendUserId();
        if (friendUserId != null) {
            stmt.bindString(2, friendUserId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String drawingId = entity.getDrawingId();
        if (drawingId != null) {
            stmt.bindString(4, drawingId);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String command = entity.getCommand();
        if (command != null) {
            stmt.bindString(6, command);
        }
 
        String paintSize = entity.getPaintSize();
        if (paintSize != null) {
            stmt.bindString(7, paintSize);
        }
 
        String paintColor = entity.getPaintColor();
        if (paintColor != null) {
            stmt.bindString(8, paintColor);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String friendUserId = entity.getFriendUserId();
        if (friendUserId != null) {
            stmt.bindString(2, friendUserId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String drawingId = entity.getDrawingId();
        if (drawingId != null) {
            stmt.bindString(4, drawingId);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String command = entity.getCommand();
        if (command != null) {
            stmt.bindString(6, command);
        }
 
        String paintSize = entity.getPaintSize();
        if (paintSize != null) {
            stmt.bindString(7, paintSize);
        }
 
        String paintColor = entity.getPaintColor();
        if (paintColor != null) {
            stmt.bindString(8, paintColor);
        }
    }

    @Override
    protected final void attachEntity(FriendMsg entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendMsg readEntity(Cursor cursor, int offset) {
        FriendMsg entity = new FriendMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // friendUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drawingId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // command
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paintSize
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // paintColor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFriendUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrawingId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommand(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPaintSize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPaintColor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
